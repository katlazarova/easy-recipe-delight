<?php

/**
 * @file
 * Contains pineapple_general.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_help().
 */
function pineapple_general_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the pineapple_general module.
    case 'help.page.pineapple_general':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module for general site-wide functions.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function pineapple_general_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  // If paragraph type exists and its value is equal to image_paragraph.
  if (isset($element['#paragraph_type']) && $element['#paragraph_type'] == 'image_paragraph') {
    $user_roles = \Drupal::currentUser()->getRoles();
    // If the hero image field exists and if content editor is in the user roles array.
    if (isset($element['subform']['field_p_ip_hero_image']) && in_array('content_editor', $user_roles)) {
      /* For each $parent in the field_parents array, if the parent is in an
      article or recipe content type, restrict access to the hero image field. */
      foreach ($element['#field_parents'] as $parent) {
        if ($parent == 'field_r_body' || $parent == 'field_a_body') {
          $element['subform']['field_p_ip_hero_image']['#access'] = FALSE;
        }
      }
    }
  }

  if (key_exists('form_id', $form_state->getBuildInfo())) {
    $build_info = $form_state->getBuildInfo();
    // If the field is on the article or recipe create or edit form, run code.
    switch ($build_info['form_id']) {
      case 'node_article_form':
      case 'node_recipe_form':
      case 'node_article_edit_form':
      case 'node_recipe_edit_form':
        $items = $context['items'];
        $field = $items->getName();
        /* If field name is either field_a_summary or field_r_summary, set the
        maxlength to be 200 characters and the countdown to show. */
        if ($field == 'field_a_summary' || $field == 'field_r_summary') {
          $element['#maxlength_js'] = TRUE;
          $element['value']['#maxlength_js'] = TRUE;
          $maxlength_js = 200;
          $element['value']['#attributes']['maxlength'] = $maxlength_js;
          $element['#attributes']['maxlength'] = $maxlength_js;
        }
      break;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function pineapple_general_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_recipe_form':
    case 'node_recipe_edit_form':
      if (isset($form['field_r_content_author'])) {
        // Creator value is added from content_author_allowed_values_function.
        $form['field_r_content_author']['widget']['#default_value'] = 'content_creator';
      }
      break;
    case 'node_article_edit_form':
    case 'node_article_form':
      if (isset($form['field_a_content_author'])) {
        $form['field_a_content_author']['widget']['#default_value'] = 'content_creator';
      }
      break;
    /* If the form id is user_register_form and the profile image field exists,
    restrict access to the field. */
    case 'user_register_form':
      if (isset($form['field_profile_image'])) {
        $form['field_profile_image']['#access'] = FALSE;
      }
      break;
    /* If the form id user_form, if the content administrator and content editor
    are not in the user roles array restrict access to the field. */
    case 'user_form':
      $user_roles = \Drupal::currentUser()->getRoles();
      if (!in_array('content_administrator', $user_roles) && !in_array('content_editor', $user_roles)) {
        if (isset($form['field_profile_image'])) {
          $form['field_profile_image']['#access'] = FALSE;
        }
      }
      break;
  }
}

/**
 * Set dynamic allowed values for the content author field(s).
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 * This functions is called in the field.storage.node files for the content author fields for the nodes which use it.
 *
 * Do drush cim -y after making changes to the config files (to call one of these functions), in order to import the config changes.
 *
 * @see button_color_select_list_values()
 * This function sets the options of the select field, in order to create the possibility for more color options to be added in the future.
 */
function content_author_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $creator_first_name = $entity->getOwner()->get('field_first_name')->value;
  $creator_surname = $entity->getOwner()->get('field_surname')->value;

  $options = [
      'content_creator' => "{$creator_first_name} {$creator_surname}"
  ];

  return $options;
}

function button_color_select_list_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $options = [
    'primary' => 'Primary',
    'secondary' => 'Secondary',
    'tertiary' => 'Tertiary',
  ];

  return $options;
}
